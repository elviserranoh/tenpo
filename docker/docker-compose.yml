services:

  tenpo:
    image: elviserranoh/tenpo:0.0.5
    restart: always
    depends_on:
      - db
      - redis
      - kafka-broker-1
    environment:
      DB_URL: r2dbc:postgresql://db:5432/tenpodb
      DB_URL_LIQUIBASE: jdbc:postgresql://db:5432/tenpodb
      DB_USER: root
      DB_PASS: root
      KAFKA_BROKER: kafka-broker-1:19092
      SERVER_PORT: 8080
      REDIS_URL: redis
      REDIS_PORT: 6379
    networks:
      - tenpo-net
    ports:
      - "9010:9010"
      - "8080:8080"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 180s

  db:
    image: postgres:17-alpine
    restart: always
    shm_size: 128mb
    environment:
      POSTGRES_DB: tenpodb
      POSTGRES_PASSWORD: root
      POSTGRES_USER: root
      PG_DATA: /var/lib/postgresql/data/pgdata
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_tenpo_data:/var/lib/postgresql/data
    networks:
      - tenpo-net
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U root -d tenpodb" ]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:latest
    restart: always
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 3
    networks:
      - tenpo-net

  redis-commander:
    image: rediscommander/redis-commander:latest
    restart: always
    environment:
      - REDIS_HOSTS=local:redis:6379
    networks:
      - tenpo-net
    ports:
      - "8081:8081"
    depends_on:
      - redis

  adminer:
    image: adminer
    depends_on:
      - db
    restart: always
    ports:
      - "8555:8080"
    networks:
      - tenpo-net

  kafka-broker-1:
    image: confluentinc/cp-kafka:7.9.0
    restart: always
    ports:
      # Puerto para clientes Kafka (ej. tu aplicación WebFlux, herramientas de UI, etc.)
      - "9092:9092"
      # Puerto para la comunicación del controlador KRaft.
      # Exponerlo es útil para debugging o si tuvieras otros nodos controladores externos.
      - "29092:29092"
    environment:
      # --- Configuración KRaft Obligatoria ---
      # KAFKA_NODE_ID debe ser único para cada nodo en el clúster KRaft.
      KAFKA_BROKER_ID: 1

      # KAFKA_PROCESS_ROLES especifica si el nodo actúa como broker, controller o ambos.
      KAFKA_PROCESS_ROLES: broker,controller

      # CLUSTER_ID debe ser unico para el cluster Kafka.
      # Generar este ID UNA VEZ (con kafka-storage.sh random-uuid)
      # y usar el mismo para todos los nodos que pertenezcan a este cluster.
      CLUSTER_ID: wqJKbv9BTw6b8S8pLUM6ZA

      # KAFKA_CONTROLLER_QUORUM_VOTERS lista los nodos que participan en el quórum del controlador.
      # Formato: node_id1@host1:port1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-broker-1:29092

      # --- Configuración de Listeners ---
      # KAFKA_LISTENERS: A qué interfaces de red y puertos se enlaza Kafka DENTRO del contenedor.
      # Usamos 0.0.0.0 para enlazar a todas las interfaces dentro del contenedor.
      #   - LISTENER_INTERNAL: Para comunicación entre brokers y clientes dentro de la red Docker.
      #   - LISTENER_EXTERNAL: Para clientes fuera de Docker (ej. tu máquina host).
      #   - CONTROLLER: Para el protocolo KRaft.
      KAFKA_LISTENERS: LISTENER_INTERNAL://0.0.0.0:19092,LISTENER_EXTERNAL://0.0.0.0:9092,CONTROLLER://0.0.0.0:29092

      # KAFKA_ADVERTISED_LISTENERS: Cómo los clientes (y otros brokers) se conectarán a este broker.
      #   - LISTENER_INTERNAL: kafka-broker-1:19092 (para otros contenedores en la red 'tenpo-net')
      #   - LISTENER_EXTERNAL: localhost:9092 (para aplicaciones en tu máquina host)
      #   - CONTROLLER: kafka-broker-1:29092 (para comunicación KRaft)
      KAFKA_ADVERTISED_LISTENERS: LISTENER_INTERNAL://kafka-broker-1:19092,LISTENER_EXTERNAL://localhost:9092,CONTROLLER://kafka-broker-1:29092

      # KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: Mapea los nombres de los listeners a protocolos de seguridad.
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,LISTENER_INTERNAL:PLAINTEXT,LISTENER_EXTERNAL:PLAINTEXT

      # KAFKA_INTER_BROKER_LISTENER_NAME: El nombre del listener que los brokers usarán para comunicarse entre sí.
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_INTERNAL

      # KAFKA_CONTROLLER_LISTENER_NAMES: El nombre del listener que los controladores KRaft usarán.
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER

      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0 # Útil para desarrollo, acelera la asignación de particiones.
      KAFKA_LOG_DIRS: '/var/lib/kafka/data/logs' # Directorio de datos de Kafka
    volumes:
      - kafka_tenpo_data:/var/lib/kafka/data
    networks:
      - tenpo-net

  init-kafka:
    image: confluentinc/cp-kafka:7.9.0
    depends_on:
      - kafka-broker-1
    networks:
      - tenpo-net
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      kafka-topics --bootstrap-server kafka-broker-1:19092 --list

      echo -e 'Eliminanto topics kafka'
      kafka-topics --bootstrap-server kafka-broker-1:19092 --topic com.tenpo.informatic.challenge.history_call --delete --if-exists

      echo -e 'Creando topicos de kafka'
      kafka-topics --bootstrap-server kafka-broker-1:19092 --create --if-not-exists --topic com.tenpo.informatic.challenge.history_call --replication-factor 1 --partitions 1

      echo -e 'Se han creado los siguientes topicos:'
      kafka-topics --bootstrap-server kafka-broker-1:19092 --list
      "

networks:
  tenpo-net:
    external: true

volumes:
  postgres_tenpo_data:
  kafka_tenpo_data:


